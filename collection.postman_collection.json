{
	"info": {
		"_postman_id": "f50d2df0-07a8-475b-8dde-f40d088cf277",
		"name": "collection",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44436134"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson.id);",
									"    pm.expect(responseJson.title);",
									"    pm.expect(responseJson.author);",
									"});",
									"",
									"pm.test(\"Each post has a numeric ID\", () => {",
									"    //\"id\" should be set as number, expect test to fail since it's set as a string",
									"    pm.response.json().forEach(post => {",
									"        pm.expect(post.id).to.be.a('number');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200 for existing post\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Test existing post\", () => {",
									"    //verify correct values for post id={{postId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"postId\"));",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"postTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"postAuthor\"));",
									"});",
									"",
									"pm.test(\"Post has numeric ID\", () => {",
									"    // value \"id\" should be set as number",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/{{postId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    //non existing id or incorrect format id",
									"    // when id blank returns get posts",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"a"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data so we can reuse it in other tests as necessary",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"newPostId\", jsonData.id);",
									"    pm.environment.set(\"newPostTitle\", jsonData.title);",
									"    pm.environment.set(\"newPostAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseJson.title).to.eql(requestBody.title);",
									"    pm.expect(responseJson.author).to.eql(requestBody.author);",
									"});",
									"",
									"pm.test(\"Post created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'title'\r",
									"if (!body.hasOwnProperty('title') || typeof body.title !== 'string' || body.title.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'title' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Validate 'author'\r",
									"if (!body.hasOwnProperty('author') || typeof body.author !== 'string' || body.author.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'author' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Add 1 to iterator to increase the new id for posts\r",
									"pm.environment.set(\"newPostId\",parseInt(pm.environment.get(\"newPostId\"))+1)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{newPostId}}\",\r\n    \"title\": \"New Post!#   1234\",\r\n    \"author\": \"QA Testerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Blank ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"postId\", jsonData.id);",
									"    pm.environment.set(\"postTitle\", jsonData.title);",
									"    pm.environment.set(\"postAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"postTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"postAuthor\"));",
									"});",
									"",
									"pm.test(\"Post created has numeric ID\", () => {",
									"    // autogenerated \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'title'\r",
									"if (!body.hasOwnProperty('title') || typeof body.title !== 'string' || body.title.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'title' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Validate 'author'\r",
									"if (!body.hasOwnProperty('author') || typeof body.author !== 'string' || body.author.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'author' field. It must be a non-empty string.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Post!#   1234\",\r\n    \"author\": \"QA Testerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Missing Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"postId\", jsonData.id);",
									"    pm.environment.set(\"postTitle\", jsonData.title);",
									"    pm.environment.set(\"postAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"postTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"postAuthor\"));",
									"});",
									"",
									"pm.test(\"Post created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'title'\r",
									"if (!body.hasOwnProperty('title') || typeof body.title !== 'string' || body.title.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'title' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Validate 'author'\r",
									"if (!body.hasOwnProperty('author') || typeof body.author !== 'string' || body.author.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'author' field. It must be a non-empty string.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Post!#   1234\",\r\n    \"author\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new data to updated post",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"postId\", jsonData.id);",
									"    pm.environment.set(\"postTitle\", jsonData.title);",
									"    pm.environment.set(\"postAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for post id={{postId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"postId\"));",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"postTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"postAuthor\"));",
									"});",
									"",
									"pm.test(\"Post has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since property is a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"New Post\",\r\n  \"author\": \"QA Tester\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/{{postId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"New Post\",\r\n  \"author\": \"QA Tester\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/1234567yuh",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"1234567yuh"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Missing Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats. We don't fail for missing fields, as they could be optional, but we do fail for incorrect formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'title' exists\r",
									"if (!body.hasOwnProperty('title')) {\r",
									"    console.log(\"Missing 'title' field.\")\r",
									"}\r",
									"else {\r",
									"    // Validate 'title' format\r",
									"    if (typeof body.title !== 'string' || body.title.trim() === '') {\r",
									"        throw new Error(\"Invalid 'title' field. It must be a non-empty string.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"// Validate 'author' exists\r",
									"if (!body.hasOwnProperty('author')) {\r",
									"    console.log(\"Missing'author' field.\")\r",
									"}\r",
									"else {\r",
									"    // Validate 'author' format\r",
									"    if (typeof body.author !== 'string' || body.author.trim() === '') {\r",
									"        throw new Error(\"Invalid 'author' field. It must be a non-empty string.\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"author\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/{{postId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/{{postId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/post",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"post"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"  pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson.id);",
									"    pm.expect(responseJson.body);",
									"    pm.expect(responseJson.postId);",
									"});",
									"",
									"pm.test(\"Each comment has a numeric ID\", () => {",
									"    //\"id\" should be set as number, expect test to fail since it's a string",
									"    pm.response.json().forEach(comment => {",
									"        pm.expect(comment.id).to.be.a('number');",
									"    });",
									"});",
									"",
									"pm.test(\"Each comment has a numeric postID\", () => {",
									"    //\"postId\" should be set as number, expect test to fail since we have comments not associated to posts",
									"    pm.response.json().forEach(comment => {",
									"        pm.expect(comment.postId).to.be.a('number');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties. Id and PostId should exist, comment always associated to a post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"    pm.expect(responseJson.postId).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Test existing comment\", () => {",
									"    //verify correct values for existing comment ",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"commentId\"));",
									"    pm.expect(responseJson.body).to.eql(pm.environment.get(\"commentBody\"));",
									"    pm.expect(responseJson.postId).to.eql(pm.environment.get(\"commentPostId\"));",
									"});",
									"",
									"pm.test(\"Comment has numeric ID\", () => {",
									"    // value \"id\" and \"postId\" should be set as number",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent comment\", () => {",
									"    //non existing id or incorrect format id",
									"    // when id blank returns get comments",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/aaa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"aaa"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"id should not be undefined\");",
									"    pm.expect(responseJson.postId).to.not.equal(undefined, \"postId should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdCommentId\", jsonData.id);",
									"    pm.environment.set(\"createdCommentBody\", jsonData.body);",
									"    pm.environment.set(\"createdCommentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(\"some comment\");",
									"    pm.expect(responseJson.postId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Comment created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Comment created has numeric postID\", () => {",
									"    // \"postid\" should be set as number",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.postId).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'body'\r",
									"if (!body.hasOwnProperty('body') || typeof body.body !== 'string' || body.body.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'body' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Validate 'author'\r",
									"if (!body.hasOwnProperty('postId') || typeof body.postId !== 'number') {\r",
									"    throw new Error(\"Missing or invalid 'postId' field. It must be a number.\");\r",
									"}\r",
									"\r",
									"// Add 1 to iterator to increase the new id for comments\r",
									"pm.environment.set(\"newCommentId\",parseInt(pm.environment.get(\"newCommentId\"))+1)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{newCommentId}}\",\r\n    \"body\": \"Another comment 1234++\",\r\n    \"postId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Blank ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"id should not be undefined\");",
									"    pm.expect(responseJson.postId).to.not.equal(undefined, \"postId should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdCommentId\", jsonData.id);",
									"    pm.environment.set(\"createdCommentBody\", jsonData.body);",
									"    pm.environment.set(\"createdCommentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(\"some comment\");",
									"    pm.expect(responseJson.postId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Comment created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Comment created has numeric postID\", () => {",
									"    // \"postid\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.postId).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Missing Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"id should not be undefined\");",
									"    pm.expect(responseJson.postId).to.not.equal(undefined, \"postId should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdCommentId\", jsonData.id);",
									"    pm.environment.set(\"createdCommentBody\", jsonData.body);",
									"    pm.environment.set(\"createdCommentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(\"some comment\");",
									"    pm.expect(responseJson.postId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Comment created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Comment created has numeric postID\", () => {",
									"    // \"postid\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.postId).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'body'\r",
									"if (!body.hasOwnProperty('body') || typeof body.body !== 'string' || body.body.trim() === '') {\r",
									"    throw new Error(\"Missing or invalid 'title' field. It must be a non-empty string.\");\r",
									"}\r",
									"\r",
									"// Validate 'postId'\r",
									"if (!body.hasOwnProperty('postId') || typeof body.author !== \"number\") {\r",
									"    throw new Error(\"Missing or invalid 'author' field. It must be a number.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": \"qq\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new data to updated comment",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"commentId\", jsonData.id);",
									"    pm.environment.set(\"commentBody\", jsonData.body);",
									"    pm.environment.set(\"commentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values comment id={{createdCommentId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(pm.environment.get(\"commentBody\"));",
									"    pm.expect(responseJson.postId).to.eql(pm.environment.get(\"commentPostId\"));",
									"});",
									"",
									"pm.test(\"Comment has numeric ID and postID\", () => {",
									"    // \"id\" and \"postId\" should be set as number",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.postId).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments/aaa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"aaa"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Missing Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Validate that request properties exist and satisfy formats. We don't fail for missing fields, as they could be optional, but we do fail for incorrect formats\r",
									"let requestBody = pm.request.body.raw;\r",
									"let body = {};\r",
									"\r",
									"try {\r",
									"    body = JSON.parse(requestBody);\r",
									"} catch (e) {\r",
									"    throw new Error(\"Request body is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Validate 'body' exists\r",
									"if (!body.hasOwnProperty('body')) {\r",
									"    console.log(\"Missing 'body' field.\")\r",
									"}\r",
									"else {\r",
									"    // Validate 'body' format\r",
									"    if (typeof body.body !== 'string' || body.body.trim() === '') {\r",
									"        throw new Error(\"Invalid 'body' field. It must be a non-empty string.\");\r",
									"    }\r",
									"}\r",
									"\r",
									"// Validate 'postId' exists\r",
									"if (!body.hasOwnProperty('postId')) {\r",
									"    console.log(\"Missing 'postId' field.\")\r",
									"}\r",
									"else {\r",
									"    // Validate 'postId' format\r",
									"    if (typeof body.postId !== 'number') {\r",
									"        throw new Error(\"Invalid 'postId' field. It must be a number.\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Comment - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"comment"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for profile",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.name).to.eql(\"typicode\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"profile"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}