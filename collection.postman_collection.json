{
	"info": {
		"_postman_id": "f50d2df0-07a8-475b-8dde-f40d088cf277",
		"name": "collection",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44436134"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "Get Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson.id);",
									"    pm.expect(responseJson.title);",
									"    pm.expect(responseJson.author);",
									"});",
									"",
									"pm.test(\"Each post has a numeric ID\", () => {",
									"    //\"id\" should be set as number, expect test to fail since it's a string",
									"    pm.response.json().forEach(post => {",
									"        pm.expect(post.id).to.be.a('number');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Post by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson[0]).to.have.property('id');",
									"    pm.expect(responseJson[0]).to.have.property('title');",
									"    pm.expect(responseJson[0]).to.have.property('author');",
									"});",
									"",
									"pm.test(\"Test post id 1\", () => {",
									"    //verify correct values for post id={{createdPostId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson[0].id).to.eql(pm.environment.get(\"createdPostId\"));",
									"    pm.expect(responseJson[0].title).to.eql(pm.environment.get(\"createdPostTitle\"));",
									"    pm.expect(responseJson[0].author).to.eql(pm.environment.get(\"createdPostAuthor\"));",
									"});",
									"",
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/?id={{createdPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{createdPostId}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdPostId\", jsonData.id);",
									"    pm.environment.set(\"createdPostTitle\", jsonData.title);",
									"    pm.environment.set(\"createdPostAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"PostTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"PostAuthor\"));",
									"});",
									"",
									"pm.test(\"Post created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Post\",\r\n    \"author\": \"QA Tester\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new data to updated post",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdPostId\", jsonData.id);",
									"    pm.environment.set(\"createdPostTitle\", jsonData.title);",
									"    pm.environment.set(\"createdPostAuthor\", jsonData.author);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for post id={{createdPostId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"createdPostId\"));",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"createdPostTitle\"));",
									"    pm.expect(responseJson.author).to.eql(pm.environment.get(\"createdPostAuthor\"));",
									"});",
									"",
									"pm.test(\"Post has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"New Post\",\r\n  \"author\": \"QA Tester\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/posts/{{createdPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{createdPostId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('author');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/posts/{{createdPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"posts",
								"{{createdPostId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"  pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson.id);",
									"    pm.expect(responseJson.body);",
									"    pm.expect(responseJson.postId);",
									"});",
									"",
									"pm.test(\"Each comment has a numeric ID\", () => {",
									"    //\"id\" should be set as number, expect test to fail since it's a string",
									"    pm.response.json().forEach(comment => {",
									"        pm.expect(comment.id).to.be.a('number');",
									"    });",
									"});",
									"",
									"pm.test(\"Each comment has a numeric postID\", () => {",
									"    //\"postId\" should be set as number, expect test to fail since we have comments not associated to posts",
									"    pm.response.json().forEach(comment => {",
									"        pm.expect(comment.postId).to.be.a('number');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Comment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson[0]).to.have.property('id');",
									"    pm.expect(responseJson[0]).to.have.property('body');",
									"    pm.expect(responseJson[0]).to.have.property('postId');",
									"});",
									"",
									"pm.test(\"Test post id 1\", () => {",
									"    //verify correct values for post 1",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson[0].id).to.eql(\"1\");",
									"    pm.expect(responseJson[0].body).to.eql(\"some comment\");",
									"    pm.expect(responseJson[0].postId).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/?id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"id should not be undefined\");",
									"    pm.expect(responseJson.postId).to.not.equal(undefined, \"postId should not be undefined\");",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new post data",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdCommentId\", jsonData.id);",
									"    pm.environment.set(\"createdCommentBody\", jsonData.body);",
									"    pm.environment.set(\"createdCommentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for new post",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(\"some comment\");",
									"    pm.expect(responseJson.postId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Comment created has numeric ID\", () => {",
									"    // \"id\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Comment created has numeric postID\", () => {",
									"    // \"postid\" should be set as number, expect test to fail since it's a string",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.postId).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save new id as environment variable\", () => {",
									"    // Save new data to updated comment",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"createdCommentId\", jsonData.id);",
									"    pm.environment.set(\"createdCommentBody\", jsonData.body);",
									"    pm.environment.set(\"createdCommentPostId\", jsonData.postId);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values comment id={{createdCommentId}}",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.body).to.eql(pm.environment.get(\"createdCommentBody\"));",
									"    pm.expect(responseJson.postId).to.eql(pm.environment.get(\"createdCommentPostId\"));",
									"});",
									"",
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"some comment\",\r\n    \"postId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/comments/{{createdCommentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{createdCommentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //verify structure of the response and properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('postId');",
									"    pm.expect(responseJson.id).to.not.equal(undefined, \"ID should not be undefined\");",
									"});",
									"",
									"pm.test(\"Status code is 404 for non-existent post\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/comments/{{createdCommentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"comments",
								"{{createdCommentId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response values match request values\", () => {",
									"    //verify correct values for profile",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.name).to.eql(\"typicode\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"profile"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}